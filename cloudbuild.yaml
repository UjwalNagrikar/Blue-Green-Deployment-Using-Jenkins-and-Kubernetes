steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      ['build', '-t', 'gcr.io/$PROJECT_ID/my-app:latest', '.']

  # Step 2: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      ['push', 'gcr.io/$PROJECT_ID/my-app:latest']

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      [
        'run', 'deploy', 'my-app',
        '--image', 'gcr.io/$PROJECT_ID/my-app:latest',
        '--region', 'asia-south1',
        '--allow-unauthenticated'
      ]

  # Step 4: Connect to GKE cluster
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîó Connecting to GKE..."
        gcloud container clusters get-credentials my-gke-cluster --region asia-south1 --project $PROJECT_ID

  # Step 5: Apply deployment and service if not already created
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß± Applying manifests (if needed)..."
        kubectl apply -f k8s/deployment.yaml || true
        kubectl apply -f k8s/service.yaml || true

  # Step 6: Update the image for deployment `my-app`
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üöÄ Updating deployment image..."
        kubectl set image deployment/my-app my-app=gcr.io/$PROJECT_ID/my-app:latest
        echo "‚è≥ Waiting for rollout..."
        kubectl rollout status deployment/my-app

images:
  - 'gcr.io/$PROJECT_ID/my-app:latest'

options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
